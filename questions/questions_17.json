[
  {
    "type": "choice",
    "question": "Як виконується синхронний код у більшості мов програмування та в JavaScript, якщо не використовується асинхронність?",
    "answers": [
      "Декілька інструкцій одночасно.",
      "Кожна інструкція чекає завершення попередньої, послідовно.",
      "У випадковому порядку.",
      "Залежно від навантаження на процесор."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Чому в однопотоковому JavaScript важливо використовувати асинхронність при роботі з такими операціями, як мережеві запити чи таймери?",
    "answers": [
      "Для прискорення виконання синхронного коду.",
      "Щоб зробити JavaScript багатопотоковим.",
      "Щоб уникнути блокування виконання основного коду та \"зависання\" інтерфейсу.",
      "Асинхронність не має значення в однопотокових мовах."
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Що відбувається в асинхронній моделі виконання коду, коли запускається \"повільна\" операція, наприклад, мережевий запит?",
    "answers": [
      "Програма зупиняється і чекає завершення цієї операції.",
      "Програма продовжує виконувати інший код, не чекаючи завершення \"повільної\" операції.",
      "Виникає помилка.",
      "Операція скасовується автоматично."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Яка основна відмінність між асинхронністю в JavaScript та багатопотоковістю (паралелізмом)?",
    "answers": [
      "Асинхронність використовує декілька потоків виконання, багатопотоковість – один.",
      "Асинхронність досягається через відкладені виклики функцій в одному потоці, багатопотоковість передбачає паралельне виконання в декількох потоках.",
      "Асинхронність блокує основний потік, багатопотоковість – ні.",
      "Це синоніми, що означають одне й те саме."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Який механізм використовується в JavaScript для досягнення асинхронності в однопотоковому середовищі?",
    "answers": [
      "Паралельне виконання коду на кількох ядрах процесора.",
      "Розділення програми на окремі потоки.",
      "Відкладені виклики функцій, де ініціалізація операції та обробка результату є різними діями.",
      "Блокування виконання до завершення тривалих операцій."
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Яка функція дозволяє запланувати одноразовий виклик іншої функції через певний проміжок часу?",
    "answers": [
      "setInterval()",
      "clearInterval()",
      "setTimeout()",
      "requestAnimationFrame()"
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "В яких одиницях вимірювання вказується затримка (delay) для функцій setTimeout() та setInterval()?",
    "answers": [
      "Секунди.",
      "Мілісекунди.",
      "Хвилини.",
      "Наносекунди."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Що повертає виклик функції setTimeout()?",
    "answers": [
      "Promise.",
      "Значення, яке повертає callback-функція.",
      "Числовий ідентифікатор таймера.",
      "Об'єкт помилки."
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Яка функція використовується для скасування відкладеного виклику функції, запланованого за допомогою setTimeout()?",
    "answers": [
      "resetTimeout()",
      "stopTimeout()",
      "clearTimeout()",
      "removeTimeout()"
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Який аргумент необхідно передати функції clearTimeout() для скасування таймера?",
    "answers": [
      "Назву callback-функції.",
      "Час затримки таймера.",
      "Числовий ідентифікатор таймера, повернутий setTimeout().",
      "Рядок з назвою таймера."
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Яка функція використовується для регулярного повторення виконання іншої функції через певний інтервал часу?",
    "answers": [
      "setTimeout()",
      "clearInterval()",
      "setInterval()",
      "requestIdleCallback()"
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Що повертає виклик функції setInterval()?",
    "answers": [
      "Результат виконання callback-функції.",
      "Числовий ідентифікатор інтервалу.",
      "Promise.",
      "undefined."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Яка функція використовується для скасування регулярного виконання функції, запланованого за допомогою setInterval()?",
    "answers": [
      "resetInterval()",
      "stopInterval()",
      "clearInteger()",
      "clearInterval()"
    ],
    "correct": 3
  },
  {
    "type": "choice",
    "question": "Який аргумент необхідно передати функції clearInterval() для скасування інтервалу?",
    "answers": [
      "Назву callback-функції.",
      "Час інтервалу.",
      "Числовий ідентифікатор інтервалу, повернутий setInterval().",
      "Рядок з назвою інтервалу."
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Де реалізовані браузерні таймери (setTimeout, setInterval) в JavaScript?",
    "answers": [
      "Вони вбудовані безпосередньо в ядро мови JavaScript.",
      "Вони реалізовані в середовищі браузера і доступні на глобальному об'єкті window.",
      "Вони є частиною специфікації ECMAScript.",
      "Вони реалізовані на стороні сервера."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Яка приблизна мінімальна затримка існує для браузерних таймерів за стандартом?",
    "answers": [
      "0 мілісекунд.",
      "4 мілісекунди.",
      "10 мілісекунд.",
      "100 мілісекунд."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Чому браузерні таймери можуть спрацьовувати рідше, ніж зазначено в параметрі delay?",
    "answers": [
      "Через помилки в коді таймера.",
      "Через занадто мале навантаження на процесор.",
      "Через занадто велике завантаження процесора або неактивність вкладки браузера.",
      "Таймери завжди спрацьовують точно у вказаний час."
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Що відбувається з асинхронною callback-функцією, переданою в setTimeout(), після того, як ця функція setTimeout() відпрацювала синхронно?",
    "answers": [
      "Callback-функція виконується негайно.",
      "Callback-функція ставиться в асинхронну чергу на виконання через вказаний проміжок часу.",
      "Callback-функція ігнорується.",
      "Callback-функція виконується тільки після перезавантаження сторінки."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Як виглядатиме виведення в консоль для наступного коду? console.log(\"First\"); setTimeout(() => { console.log(\"Second\"); }, 1000); console.log(\"Third\");",
    "answers": [
      "First, Second, Third",
      "Second, First, Third",
      "First, Third, Second",
      "Third, First, Second"
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Яка з перерахованих операцій є прикладом асинхронної операції, згаданої в матеріалі?",
    "answers": [
      "Додавання двох чисел.",
      "Читання змінної.",
      "Завантаження даних з сервера.",
      "Виконання циклу for."
    ],
    "correct": 2
  }
]