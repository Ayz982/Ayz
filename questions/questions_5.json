[
  {
    "type": "choice",
    "question": "Яка головна мета використання циклів у програмуванні?",
    "answers": [
      "Оголошення змінних.",
      "Виконання однотипної дії багато разів.",
      "Визначення умов виконання коду.",
      "Створення нових функцій."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Як називається одне виконання тіла циклу?",
    "answers": [
      "Умова виходу.",
      "Ітерація.",
      "Розгалуження.",
      "Повторення."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Яка конструкція циклу виконує блок коду в тілі циклу доти, доки умова для виходу оцінюється як true?",
    "answers": [
      "for",
      "do...while",
      "while",
      "for...of"
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Де обчислюється умова в циклі while?",
    "answers": [
      "Після кожної ітерації циклу.",
      "Перед кожною ітерацією циклу.",
      "Тільки перед першою ітерацією.",
      "Тільки після останньої ітерації."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Що відбувається, якщо умова в циклі while оцінюється як false перед першою ітерацією?",
    "answers": [
      "Тіло циклу виконується один раз.",
      "Виникає помилка.",
      "Виконання циклу переривається, і скрипт продовжує виконувати інструкції після циклу.",
      "Цикл перетворюється на for."
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Яка особливість циклу do...while порівняно з циклом while?",
    "answers": [
      "Умова перевіряється перед першою ітерацією.",
      "Тіло циклу гарантовано виконується хоча б один раз, оскільки умова перевіряється після першої ітерації.",
      "Тіло циклу не виконується взагалі, якщо умова хибна.",
      "Цикл не має умови виходу."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Де розміщується умова в циклі do...while?",
    "answers": [
      "Перед ключовим словом do.",
      "Після ключового слова while після тіла циклу.",
      "У круглих дужках одразу після ключового слова do.",
      "У фігурних дужках тіла циклу."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Який цикл вважається найбільш поширеним і часто використовується, коли відома кількість ітерацій або потрібен доступ до лічильника?",
    "answers": [
      "while",
      "do...while",
      "for",
      "for...in"
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "З яких трьох частин складається заголовок циклу for у круглих дужках?",
    "answers": [
      "Ініціалізація лічильника, умова, ітерація лічильника.",
      "Умова, тіло циклу, ініціалізація лічильника.",
      "Ітерація, умова, тіло циклу.",
      "Ініціалізація, тіло циклу, умова."
    ],
    "correct": 0
  },
  {
    "type": "choice",
    "question": "Що відбувається на кожній ітерації циклу for після виконання тіла циклу?",
    "answers": [
      "Перевіряється умова, а потім ініціалізується лічильник.",
      "Виконується вираз ітерації лічильника.",
      "Цикл негайно зупиняється.",
      "Обчислюється умова виходу."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Що відбувається, якщо умова в циклі for стає хибною?",
    "answers": [
      "Виконується тіло циклу ще один раз.",
      "Виконання циклу переривається.",
      "Лічильник скидається до нуля.",
      "Цикл переходить у стан \"очікування\"."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Що робить оператор break всередині циклу?",
    "answers": [
      "Продовжує виконання циклу до наступної ітерації.",
      "Негайно припиняє виконання поточного циклу і передає керування на наступну інструкцію після циклу.",
      "Пропускає поточну ітерацію і переходить до наступної.",
      "Викликає помилку."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Чи перериває оператор break виконання функції, в якій він знаходиться?",
    "answers": [
      "Так, завжди.",
      "Ні, він перериває тільки цикл, але не функцію.",
      "Тільки якщо цикл знаходиться в корені функції.",
      "Залежить від типу циклу."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Який оператор використовується для переривання виконання і циклу, і функції, в якій він знаходиться, з можливістю повернути значення?",
    "answers": [
      "break",
      "continue",
      "return",
      "stop"
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Що робить оператор continue всередині циклу?",
    "answers": [
      "Негайно припиняє виконання поточного циклу.",
      "Пропускає решту коду в тілі циклу для поточної ітерації і переходить до наступної ітерації циклу.",
      "Зупиняє виконання функції.",
      "Викликає помилку, якщо умова хибна."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Коли доцільно використовувати оператор continue?",
    "answers": [
      "Коли потрібно повністю вийти з циклу.",
      "Коли потрібно пропустити обробку певних елементів або випадків в ітерації, але продовжити цикл.",
      "Коли потрібно повернути значення з функції.",
      "Коли потрібно перетворити цикл на розгалуження."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Якщо умова в циклі while ніколи не стає хибною, що відбудеться?",
    "answers": [
      "Цикл виконається один раз.",
      "Цикл завершиться автоматично через 100 ітерацій.",
      "Цикл стане нескінченним, що може призвести до зависання програми.",
      "Виникне синтаксична помилка."
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "У прикладі for (let i = 0; i <= 5; i += 1), скільки разів виконається тіло циклу?",
    "answers": [
      "5",
      "6",
      "4",
      "Нескінченно"
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Що буде виведено в консоль в результаті виконання наступного коду? let i = 0; while (i < 3) {  console.log(i);  i += 1; }",
    "answers": [
      "0 1 2",
      "1 2 3",
      "0 1 2 3",
      "3 2 1"
    ],
    "correct": 0
  },
  {
    "type": "choice",
    "question": "Що буде виведено в консоль в результаті виконання наступного коду? for (let j = 1; j <= 5; j += 1) {  if (j === 3) { break; } console.log(j); }",
    "answers": [
      "1 2 3",
      "1 2",
      "3 4 5",
      "1 2 4 5"
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Для чого використовуються розгалуження в програмуванні?",
    "answers": [
      "Для виконання одного і того ж коду багато разів.",
      "Для оголошення нових змінних.",
      "Для виконання різного коду залежно від умови.",
      "Для створення функцій."
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Яка інструкція дозволяє виконати блок коду, якщо умова є істинною, і пропустити його, якщо умова хибна?",
    "answers": [
      "switch",
      "for",
      "while",
      "if"
    ],
    "correct": 3
  },
  {
    "type": "choice",
    "question": "Що відбувається, якщо умова в інструкції if оцінюється як false?",
    "answers": [
      "Код у тілі if виконується.",
      "Виникає помилка.",
      "Код у тілі if пропускається, і виконання переходить до інструкцій після блоку if.",
      "Програма зупиняється."
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Яка інструкція використовується для виконання альтернативного блоку коду, якщо умова в інструкції if виявилася хибною?",
    "answers": [
      "switch",
      "else",
      "while",
      "for"
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Яка послідовність перевірки умов є правильною при використанні if...else if...else?",
    "answers": [
      "Спочатку перевіряється else, потім if.",
      "Умови перевіряються послідовно зверху вниз. Виконується код першого блоку, умова якого виявилася істинною.",
      "Перевіряється тільки остання умова.",
      "Перевіряються всі умови одночасно."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Чи є обов'язковим наявність блоку else після інструкції if або if...else if?",
    "answers": [
      "Так, завжди.",
      "Ні, блок else є необов'язковим.",
      "Тільки якщо використовується else if.",
      "Тільки якщо умова в if завжди хибна."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Який оператор є більш лаконічним способом написання простого розгалуження типу if...else і часто використовується для простого присвоєння або повернення значення?",
    "answers": [
      "Логічне АБО (||)",
      "Тернарний оператор (? :)",
      "Логічне І (&&)",
      "Оператор switch"
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Який синтаксис має тернарний оператор?",
    "answers": [
      "condition ? valueIfTrue : valueIfFalse",
      "if (condition) { valueIfTrue } else { valueIfFalse }",
      "condition && valueIfTrue || valueIfFalse",
      "condition ? (valueIfTrue, valueIfFalse)"
    ],
    "correct": 0
  },
  {
    "type": "choice",
    "question": "Який оператор розгалуження призначений для перевірки значення виразу на сувору рівність з декількома можливими варіантами?",
    "answers": [
      "if...else",
      "Тернарний оператор",
      "switch",
      "Логічні оператори"
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "З яким оператором порівняння switch суворо порівнює значення виразу з усіма значеннями в блоках case?",
    "answers": [
      "== (несуворе порівняння)",
      "!= (не дорівнює)",
      "> (більше)",
      "=== (суворе порівняння)"
    ],
    "correct": 3
  },
  {
    "type": "choice",
    "question": "Що робить оператор break у блоці case оператора switch?",
    "answers": [
      "Продовжує перевірку наступних блоків case.",
      "Негайно перериває виконання оператора switch і передає керування коду після нього.",
      "Викликає помилку.",
      "Перезапускає оператор switch."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Як називається поведінка в операторі switch, коли після виконання коду в одному блоці case виконання продовжується в наступних блоках case, якщо відсутній оператор break?",
    "answers": [
      "Циклічність.",
      "Ланцюг.",
      "Провалювання (fall-through).",
      "Рекурсія."
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Для чого використовується блок default в операторі switch?",
    "answers": [
      "Для визначення початкового значення.",
      "Для виконання коду за замовчуванням, якщо жодного збігу значень у блоках case не відбулося.",
      "Для обробки помилок.",
      "Для повторення оператора switch."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Чи потрібен оператор break після блоку default в операторі switch?",
    "answers": [
      "Так, завжди.",
      "Ні, оскільки це останній блок, який може бути виконаний.",
      "Тільки якщо після switch є інший код.",
      "Залежить від кількості блоків case."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Що буде виведено в консоль в результаті виконання наступного коду? const age = 15; if (age >= 18) {  console.log(\"Adult\"); } else {  console.log(\"Minor\");}",
    "answers": [
      "Adult",
      "Minor",
      "Помилка",
      "Нічого не буде виведено"
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Що буде значенням змінної message в результаті виконання наступного коду? const isLoggedIn = true; const message = isLoggedIn ? \"Welcome!\" : \"Please log in.\";",
    "answers": [
      "\"Please log in.\"",
      "\"Welcome!\"",
      "`true`",
      "`isLoggedIn`"
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Що буде виведено в консоль в результаті виконання наступного коду? const dayOfWeek = 3; switch (dayOfWeek) {  case 1: console.log(\"Monday\");  case 2:  console.log(\"Tuesday\");  default:  console.log(\"Another day\"); }",
    "answers": [
      "Another day",
      "Tuesday",
      "Monday Tuesday Another day",
      "Tuesday Another day"
    ],
    "correct": 0
  },
  {
    "type": "choice",
    "question": "Якщо потрібно перевірити діапазон значень (наприклад, чи число більше за 100), яка інструкція розгалуження є більш доцільною?",
    "answers": [
      "switch (оскільки він тільки для суворої рівності)",
      "if...else if",
      "Тернарний оператор",
      "Обидва if...else if та switch однаково доцільні"
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Що буде виведено в консоль в результаті виконання наступного коду? const score = 75; if (score > 90) {  console.log(\"Excellent\"); } else if (score > 70) {  console.log(\"Good\"); } else {  console.log(\"Satisfactory\"); }",
    "answers": [
      "Excellent",
      "Good",
      "Satisfactory",
      "Good Satisfactory"
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Яка інструкція розгалуження дозволяє об'єднати кілька значень case, щоб виконати один і той самий блок коду (використовуючи \"провалювання\")?",
    "answers": [
      "if...else if",
      "Тернарний оператор",
      "switch",
      "Логічне АБО (||)"
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Що означає логічне перетворення типів в JavaScript?",
    "answers": [
      "Зміна типу даних на число.",
      "Приведення значення будь-якого типу даних до логічного (булевого) значення true або false.",
      "Перетворення рядка на масив.",
      "Зміна типу даних на об'єкт."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Які значення завжди перетворюються на false при логічному перетворенні?",
    "answers": [
      "Будь-яке число, окрім 0.",
      "Рядки, які не є порожніми.",
      "0, NaN, null, undefined, порожній рядок \"\".",
      "Будь-який об'єкт."
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Які значення перетворюються на true при логічному перетворенні?",
    "answers": [
      "Тільки число 1.",
      "Тільки непорожні рядки.",
      "Усі значення, окрім тих, що перетворюються на false (\"truthy\").",
      "Тільки об'єкти та масиви."
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Який логічний оператор повертає true, якщо обидва операнди є істинними (або можуть бути перетворені на true), і false в іншому випадку?",
    "answers": [
      "Логічне АБО (||)",
      "Логічне І (&&)",
      "Логічне заперечення (!)",
      "Логічне виключне АБО (^)"
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Яка особливість поведінки логічного оператора І (&&) щодо \"лінивих\" обчислень (short-circuiting)?",
    "answers": [
      "Він завжди обчислює обидва операнди.",
      "Він обчислює тільки другий операнд, якщо перший є істинним.",
      "Він обчислює тільки другий операнд, якщо перший є хибним.",
      "Він обчислює тільки перший операнд, якщо перший є хибним, і повертає його значення, не обчислюючи другий."
    ],
    "correct": 3
  },
  {
    "type": "choice",
    "question": "Якщо перший операнд логічного оператора І (&&) є хибним (або приводиться до false), що повертає цей оператор?",
    "answers": [
      "Значення першого операнда.",
      "Значення другого операнда.",
      "true.",
      "undefined."
    ],
    "correct": 0
  },
  {
    "type": "choice",
    "question": "Який логічний оператор повертає true, якщо хоча б один з операндів є істинним (або може бути перетворений на true), і false тільки якщо обидва операнди є хибними?",
    "answers": [
      "Логічне І (&&)",
      "Логічне АБО (||)",
      "Логічне заперечення (!)",
      "Логічне виключне АБО (^)"
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Яка особливість поведінки логічного оператора АБО (||) щодо \"лінивих\" обчислень (short-circuiting)?",
    "answers": [
      "Він завжди обчислює обидва операнди.",
      "Він обчислює тільки другий операнд, якщо перший є хибним.",
      "Він обчислює тільки другий операнд, якщо перший є істинним.",
      "Він обчислює тільки перший операнд, якщо перший є істинним, і повертає його значення, не обчислюючи другий."
    ],
    "correct": 3
  },
  {
    "type": "choice",
    "question": "Якщо перший операнд логічного оператора АБО (||) є істинним (або приводиться до true), що повертає цей оператор?",
    "answers": [
      "Значення першого операнда.",
      "Значення другого операнда.",
      "false.",
      "undefined."
    ],
    "correct": 0
  },
  {
    "type": "choice",
    "question": "Який логічний оператор повертає протилежне логічне значення свого операнда (перетворює true на false і false на true)?",
    "answers": [
      "Логічне І (&&)",
      "Логічне АБО (||)",
      "Логічне заперечення (!)",
      "Оператор порівняння (==)"
    ],
    "correct": 2
  },
  {
    "type": "choice",
    "question": "Що повертає логічне заперечення (!) при застосуванні до значення, яке перетворюється на true (\"truthy\")?",
    "answers": [
      "true.",
      "false.",
      "Оригінальне значення.",
      "undefined."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Що повертає логічне заперечення (!) при застосуванні до значення, яке перетворюється на false (\"falsy\")?",
    "answers": [
      "false.",
      "true.",
      "Оригінальне значення.",
      "null."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Що буде виведено в консоль в результаті обчислення 5 > 3 && 10 < 20?",
    "answers": [
      "true",
      "false",
      "Помилка",
      "undefined"
    ],
    "correct": 0
  },
  {
    "type": "choice",
    "question": "Що буде виведено в консоль в результаті обчислення 5 < 3 || 10 < 20?",
    "answers": [
      "true",
      "false",
      "Помилка",
      "undefined"
    ],
    "correct": 0
  },
  {
    "type": "choice",
    "question": "Що буде виведено в консоль в результаті обчислення !true?",
    "answers": [
      "true",
      "false",
      "0",
      "1"
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Що буде виведено в консоль в результаті обчислення !\"\" (логічне заперечення порожнього рядка)?",
    "answers": [
      "false",
      "true",
      "\"\"",
      "null"
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Що буде виведено в консоль в результаті обчислення 0 || \"Default Value\"?",
    "answers": [
      "0",
      "\"Default Value\"",
      "true",
      "false"
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Що буде виведено в консоль в результаті обчислення \"Hello\" && 123?",
    "answers": [
      "\"Hello\"",
      "123",
      "true",
      "false"
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Якщо потрібно виконати дію, тільки якщо обидві умови є істинними, який логічний оператор слід використовувати?",
    "answers": [
      "Логічне АБО (||)",
      "Логічне І (&&)",
      "Логічне заперечення (!)",
      "Оператор порівняння."
    ],
    "correct": 1
  },
  {
    "type": "choice",
    "question": "Якщо потрібно виконати дію, якщо хоча б одна з умов є істинною, який логічний оператор слід використовувати?",
    "answers": [
      "Логічне І (&&)",
      "Логічне АБО (||)",
      "Логічне заперечення (!)",
      "Оператор присвоєння."
    ],
    "correct": 1
  }
]